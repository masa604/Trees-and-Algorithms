public class VP{
    protected int count = 0
    protected Node root;

    //Contrutor:
    public VP() {
        this.root = null;
    }

    //FLAGS para ver equilíbrio da árvore
    boolean ll = false;
    boolean rr = false;
    boolean lr = false;
    boolean rl = false;


    //ADICIONAR NÓS
    public void add(int data) {
        if (this.root == null) {
            this.root = new Node(data);
            this.root.color = false;
        } else {
            this.root = balance(this.root, data);
        }
    }

    public Node balance(Node root, int data) {
        //f=true em caso de conflito rr
        boolean f = false;

        if (root == null)
            return(new Node(data));
        else if (data < root.key) {
            root.left = balance(root.left, data);
            root.left.parent = root;
            if (root != this.root) {
                f = true;
            }
        } else {
            root.right = balance(root.right, data);
            root.right.parent = root;
            if(root != this.root) {
                if (root.color && root.right.color)
                    f = true;
            }
        }
        if (this.ll) {
            root = rotateL(root);
            root.color = false;
            root.left.color = true;
            this.ll = false;
        } else if(this.rr) {
            root = rotateR(root);
            root.color = false;
            root.right.color = true;
            this.rr = false;
        } else if(this.rl) {
            root.right = rotateR(root.right);
            root.right.parent = root;
            root = rotateL(root);
            root.color = false;
            root.left.color = true;
            this.rl = false;
        } else if(this.lr) {
            root.left = rotateL(root.left);
            root.left.parent = root;
            root = rotateR(root);
            root.color = false;
            root.right.color = true;
            this.lr = false;
        }
        if(f) {
            if(root.parent.right == root) {
                if(root.parent.left==null || !root.parent.left.color) {
                    if(root.left!=null && root.left.color)
                        this.rl = true;
                    else if(root.right!=null && root.right.color)
                        this.ll = true;
                } else {
                    root.parent.left.color = false;
                    root.color = false;
                    if(root.parent!=this.root)
                        root.parent.color = true;
                }
            } else {
                if(root.parent.right==null || !root.parent.right.color) {
                    if(root.left!=null && root.left.color)
                        this.rr = true;
                    else if(root.right!=null && root.right.color)
                        this.lr = true;
                } else {
                    root.parent.right.color = false;
                    root.color = false;
                    if(root.parent!=this.root)
                        root.parent.color = true;
                }
            }
            f = false;
        }
        return(root);
   }

    //ROTAÇÃO DIREITA
    public Node rotateR(Node node) {
        count++;
        Node LChild = node.left;
        Node x = LChild.right;

        //rotação
        LChild.right = node;
        node.left = x;

        node.parent = LChild;
        if(x != null)
            x.parent = node;
        return (LChild);
    }

    //ROTAÇÃO ESQUERDA
    public Node rotateL(Node node){
        count++;
        Node RChild = node.right;
        Node x = RChild.left;

        //rotação
        RChild.left = node;
        node.right = x;

        node.parent = RChild;

        if(x != null)
            x.parent = node;
        return (RChild);
    }

    public int getCount() {
        return count;
    }



    //FIND
    public Node find(Node node, int key) {
        if(node == null || key == node.key) {
            return node;
        }
        if(key < node.key) {
            return find(node.left, key);
        } else {
            return find(node.right, key);
        }
    }
}
