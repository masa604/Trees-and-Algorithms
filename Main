//Questões:
//- é suposto haver nós repetidos?

//O que falta fazer:
//- corrigir as rotações da AVL
//- corrigir a AddVP
//- confirmar a findParent
//- confirmar a findUncle
//- meter os arrays da ficha
//- otimizar o código
//- função de impressão específicada para a VP Tree (*->vermelho, .->preto)
//- testar as funções find da AVL e da VP
//- melhorar o menu


import java.util.*;

public class Main {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        System.out.println("Bem-vindo ao projeto de árvores!");
        System.out.println("1. Visualização de BT");
        System.out.println("2. Visualização de BTS");
        System.out.println("3. Visualização de AVL");
        System.out.println("4. Visualização de VP");

        System.out.print("Escolha uma opção: ");
        int opcao = scanner.nextInt();

        long inicio, fim;
        double duracao;
        char resposta;


        switch (opcao) {
            //-------------------------------------ADICIONAR & ENCONTRAR ELEMENTOS!!

            //Árvore Binária - impressão:
            case 1:
                Node rootBT = new Node(100);
                Tree bt = new BT(rootBT);

                int[] vectorValuesBT = {50,150,130,20};

                inicio = System.nanoTime();

                for (int i = 0; i < vectorValuesBT.length; i++) {
                    bt.addBT(vectorValuesBT[i], rootBT);
                }

                fim = System.nanoTime();
                duracao = (fim - inicio) / 1e9;

                System.out.println("Árvore Binária Impressa:");
                System.out.print(traversePreOrder(rootBT));
                System.out.println("\nTempo de inserção na árvore binária: " + duracao + " segundos");


                System.out.print("Deseja encontrar um elemento na árvore? (S/N): ");
                resposta = scanner.next().charAt(0);

                do {
                    if (resposta == 'S' || resposta == 's') {
                        System.out.print("Insira o valor a encontrar: ");
                        int keyBT = scanner.nextInt();

                        Node foundNodeBT = bt.find(bt.root, keyBT);

                        if (foundNodeBT != null) {
                            System.out.println("Nó encontrado na Árvore Binária: " + foundNodeBT.key);
                            System.out.println(foundNodeBT);
                        } else {
                            System.out.println("Nó não encontrado na Árvore Binária.");
                            System.out.println(foundNodeBT);
                        }

                    } else if (resposta == 'N' || resposta == 'n') {
                        break;
                    }
                    System.out.print("Deseja continuar a procura? (S/N): ");
                    resposta = scanner.next().charAt(0);
                } while(resposta == 'S' || resposta == 's');


            //Árvore Binária de Pesquisa - impressão:
            case 2:
                Node rootBTS = new Node(50);
                Tree btSearch = new BTSearch(rootBTS);

                int[] vectorValuesBTS = {30,70,20,35,80,60};

                inicio = System.nanoTime();

                for (int i = 0; i < vectorValuesBTS.length; i++) {
                    btSearch.addBTS(vectorValuesBTS[i], rootBTS);
                }

                fim = System.nanoTime();
                duracao = (fim - inicio) / 1e9;

                System.out.println("Árvore Binária de Pesquisa Impressa:");
                System.out.print(traversePreOrder(rootBTS));
                System.out.println("\nTempo de inserção na árvore binária de pesquisa: " + duracao + " segundos");

                System.out.print("Deseja encontrar um elemento na árvore? (S/N): ");
                resposta = scanner.next().charAt(0);
                if (resposta == 'S' || resposta == 's') {
                    System.out.print("Insira o valor a encontrar: ");
                    int keyBTS = scanner.nextInt();

                    Node foundNodeBTSearch = btSearch.find(rootBTS, keyBTS);

                    if (foundNodeBTSearch != null) {
                        System.out.println("Nó encontrado na Árvore Binária de Pesquisa: " + foundNodeBTSearch.key);
                    } else {
                        System.out.println("Nó não encontrado na Árvore Binária de Pesquisa.");
                    }
                    System.out.println();
                    break;
                } else if (resposta == 'N' || resposta == 'n') {
                    break;
                }


                System.out.println();
                break;

            //Árvore AVL - impressão:
            case 3:
                //não está a fazer rotação dupla!!
                Node rootAVL = new Node(30);
                AVLTree avlTree = new AVLTree(rootAVL);

                int[] vectorValuesAVL = {25, 54, 50, 55, 52};

                inicio = System.nanoTime();

                for (int value : vectorValuesAVL) {
                    avlTree.addAVL(value, 1, rootAVL);
                }

                fim = System.nanoTime();
                duracao = (fim - inicio) / 1e9;

                System.out.println("Árvore AVL Impressa:");
                System.out.print(traversePreOrder(rootAVL));

                int rotationsAVL = avlTree.getCount();
                System.out.println("\nNúmero de rotações na árvore AVL: " + rotationsAVL);
                System.out.println("Tempo de inserção na árvore avl: " + duracao + " segundos");


                System.out.println();
                break;

            //Árvore VP - impressão:
            case 4:
                //false - preto
                //true - vermelho

                Node rootVP = new Node(30);
                VPTree vpTree = new VPTree(rootVP);

                int[] vectorValuesVP = {50, 65, 20, 60, 55};

                inicio = System.nanoTime();

                for (int value : vectorValuesVP) {
                    vpTree.addVP(value, 1, false, rootVP);
                }

                fim = System.nanoTime();
                duracao = (fim - inicio) / 1e9;

                System.out.println("Árvore Vermelha e Preta Impressa:");
                System.out.print(traversePreOrder(rootVP));

                int rotationsVP = vpTree.getCount();
                System.out.println("Número de rotações na árvore Vermelha e Preta: " + rotationsVP);
                System.out.println("Tempo de inserção na árvore avl: " + duracao + " segundos");

                System.out.println();
                break;


            default:
                System.out.println("Opção inválida.");
                break;
        }



    }


    //IMPRESSÃO S/IDENTIFICAÇÃO DE CORES
    public static String traversePreOrder(Node root) {

        if (root == null) {
            return "";
        }

        StringBuilder sb = new StringBuilder();
        sb.append(root.key);

        String pointerRight = "└─R─";
        String pointerLeft = (root.right != null) ? "├─L─" : "└─L─";

        traverseNodes(sb, "", pointerLeft, root.left, root.right != null);
        traverseNodes(sb, "", pointerRight, root.right, false);

        return sb.toString();
    }

    public static void traverseNodes(StringBuilder sb, String padding, String pointer, Node node, boolean hasRightSibling) {
        if (node != null) {
            sb.append("\n");
            sb.append(padding);
            sb.append(pointer);
            sb.append(node.key);

            StringBuilder paddingBuilder = new StringBuilder(padding);
            if (hasRightSibling) {
                paddingBuilder.append("│  ");
            } else {
                paddingBuilder.append("   ");
            }

            String paddingForBoth = paddingBuilder.toString();
            String pointerRight = "└─R─";
            String pointerLeft = (node.right != null) ? "├─L─" : "└─L─";

            traverseNodes(sb, paddingForBoth, pointerLeft, node.left, node.right != null);
            traverseNodes(sb, paddingForBoth, pointerRight, node.right, false);
        }
    }

    //IMPRESSÃO C/IDENTIFICAÇÃO DE CORES
    public static String traversePreOrderVP(Node root) {

        if (root == null) {
            return "";
        }

        StringBuilder sb = new StringBuilder();
        sb.append(root.key);

        String pointerRight = "└─R─";
        String pointerLeft = (root.right != null) ? "├─L─" : "└─L─";

        traverseNodes(sb, "", pointerLeft, root.left, root.right != null);
        traverseNodes(sb, "", pointerRight, root.right, false);

        return sb.toString();
    }

    public static void traverseNodesVP(StringBuilder sb, String padding, String pointer, Node node, boolean hasRightSibling) {
        if (node != null) {
            sb.append("\n");
            sb.append(padding);
            sb.append(pointer);
            sb.append(node.key);

            StringBuilder paddingBuilder = new StringBuilder(padding);
            if (hasRightSibling) {
                paddingBuilder.append("│  ");
            } else {
                paddingBuilder.append("   ");
            }

            String paddingForBoth = paddingBuilder.toString();
            String pointerRight = "└─R─";
            String pointerLeft = (node.right != null) ? "├─L─" : "└─L─";

            traverseNodes(sb, paddingForBoth, pointerLeft, node.left, node.right != null);
            traverseNodes(sb, paddingForBoth, pointerRight, node.right, false);
        }
    }

    //GERAR CONJUNTOS DE TESTE
    public static ArrayList<Integer> geraConjunto(int opcao, int tamanho, int limite) {
        ArrayList<Integer> conjunto = new ArrayList<>();
        Random r = new Random();

        if (opcao == 1) {
            while (conjunto.size() < tamanho) {
                int valor = r.nextInt(limite);
                if (!conjunto.contains(valor)) {
                    conjunto.add(valor);
                }
            }
            Collections.sort(conjunto);
        } else if (opcao == 2) {
            while (conjunto.size() < tamanho) {
                int valor = r.nextInt(limite);
                if (!conjunto.contains(valor)) {
                    conjunto.add(valor);
                }
            }
            Collections.sort(conjunto, Collections.reverseOrder());
        } else if (opcao == 3) {
            while (conjunto.size() < tamanho) {
                int valor = r.nextInt(limite);
                if (!conjunto.contains(valor)) {
                    conjunto.add(valor);
                }
            }
            Collections.shuffle(conjunto);
        } else if (opcao == 4) {
            while (conjunto.size() < tamanho) {
                int valor = r.nextInt(limite);
                if (r.nextInt(limite) < limite-1 && conjunto.contains(valor)) {
                    // 90% de chance de repetir
                    conjunto.add(valor);
                } else if (!conjunto.contains(valor)) {
                    // 10% de chance de adicionar um novo valor
                    conjunto.add(valor);
                }
            }
            Collections.shuffle(conjunto);
        }
        return conjunto;
    }


}
