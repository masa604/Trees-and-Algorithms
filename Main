import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

public class Main {
    public static void main(String[] args) {
        //variáveis para os conjuntos
        int tamanho = 1000;
        double minRepetidos = 0.10;
        double maxRepetidos = 0.20;
        double repetidosConjD = 0.90;

        //CONJUNTO A
        ArrayList<Integer> conjA = gerar(tamanho, minRepetidos, maxRepetidos);
        Collections.sort(conjA);

        //CONJUNTO B
        ArrayList<Integer> conjB = gerar(tamanho, minRepetidos, maxRepetidos);
        Collections.sort(conjB, Collections.reverseOrder());
        
        //CONJUNTO C
        ArrayList<Integer> conjC = gerar(tamanho, minRepetidos, maxRepetidos);

        //CONJUNTO D
        ArrayList<Integer> conjD = gera(tamanho, (int) (repetidosConjD * tamanho));

        /*
        //-----------------------------TESTE BT

        //Adicionar nós na árvore
        BT btTree = new BT();
        double inicio = System.nanoTime();

        for (int value : conjA) {
            btTree.add(value, btTree.root);
        }
        double fim = System.nanoTime();
        double duration = fim - inicio;


        //Imprimir árvore e tempo de inserção
        System.out.println("Árvore BT Impressa:");
        btTree.InOrder(btTree.root);
        System.out.println();
        System.out.println(duration/1e9);


        //Encontrar elementos na árvore
        for (int i = 0; i < vectorValuesBT.length; i++) {
            Node foundBT = btTree.find(btTree.root, vectorValuesBT[i]);
            if (foundBT != null) {
                System.out.println("Node found " + vectorValuesBT[i] + " at " + foundBT);
            } else {
                System.out.println("Node not found");
            }
        }


        //-----------------------------TESTE BTS

        //Adicionar nós na árvore
        BTS btsTree = new BTS();
        double inicio = System.nanoTime();

        for (int value : conjA) {
            btsTree.add(value, btsTree.root);
        }

        double fim = System.nanoTime();
        double duration = fim - inicio;


        //Imprimir árvore e tempo de inserção
        System.out.println("Árvore BTS Impressa:");
        //btsTree.InOrder(btsTree.root);
        System.out.println();
        System.out.println(duration/1e9);


        //Encontrar elementos na árvore
        for (int i = 0; i < vectorValuesBTS.length; i++) {
            Node foundBTS = btsTree.find(btsTree.root, vectorValuesBTS[i]);
            if (foundBTS != null) {
                System.out.println("Node found " + vectorValuesBTS[i] + " at " + foundBTS);
            } else {
                System.out.println("Node not found");
            }
        }


        //-----------------------------TESTE AVL

        //Adicionar nós na árvore
        AVL avlTree = new AVL();
        double inicio = System.nanoTime();

        for (int value : conjD) {
            avlTree.root = avlTree.add(value, avlTree.root);
        }

        double fim = System.nanoTime();
        double duration = fim - inicio;



        //Imprimir árvore, tempo de inserção e nº de rotações
        System.out.println("Árvore AVL Impressa:");
        //avlTree.InOrder(avlTree.root);
        System.out.println();
        System.out.println(duration/1e9);


        int conta = avlTree.getCount();
        System.out.println("Contagem de rotações: " + conta);
        System.out.println();


        //Encontrar elementos na árvore
        for (int i = 0; i < vectorValuesAVL.length; i++) {
            Node foundAVL = avlTree.find(avlTree.root, vectorValuesAVL[i]);
            if (foundAVL != null) {
                System.out.println("Node found " + vectorValuesAVL[i] + " at " + foundAVL);
            } else {
                System.out.println("Node not found");
            }
        }



        //-----------------------------TESTE VP

        //Adicionar nós na árvore
        VP vpTree = new VP();
        double inicio = System.nanoTime();

        for (int value : conjB) {
            vpTree.add(value);
        }


        double fim = System.nanoTime();
        double duration = fim - inicio;


        //Imprimir árvore, tempo de inserção e nº de rotações
        System.out.println("Árvore VP Impressa:");
        //vpTree.InOrder(vpTree.root);
        System.out.println();
        System.out.println(duration/1e9);

        int conta = vpTree.getCount();
        System.out.println("Contagem de rotações: " + conta);
        System.out.println();


       //Encontrar elementos na árvore
        for (int i = 0; i < vectorValuesVP.length; i++) {
            Node foundVP = vpTree.find(vpTree.root, vectorValuesVP[i]);
            if (foundVP != null) {
                System.out.println("Node found " + vectorValuesVP[i] + " at " + foundVP);
            } else {
                System.out.println("Node not found");
            }
        }

         */

    }



    //GERAR CONJUNTOS SOLICITADOS
    public static ArrayList<Integer> gera(int comp, int tam) {
        Random random = new Random();
        ArrayList<Integer> chavesUnicas = new ArrayList<>();
        for (int i = 1; i <= comp * 2; i++) {
            if (!chavesUnicas.contains(i)) {
                chavesUnicas.add(i);
            }
        }

        ArrayList<Integer> chavesRepetidas = new ArrayList<>();
        for (int i = 0; i < tam; i++) {
            int randomIndex = random.nextInt(chavesUnicas.size());
            chavesRepetidas.add(chavesUnicas.get(randomIndex));
        }

        ArrayList<Integer> finalList = new ArrayList<>();
        finalList.addAll(chavesUnicas);
        finalList.addAll(chavesRepetidas);
        Collections.shuffle(finalList);

        return finalList;
    }

    public static ArrayList<Integer> gerar(int comp, double paraMin, double paraMax) {
        Random random = new Random();
        int tam = random.nextInt((int) (comp * paraMax - comp * paraMin + 1)) + (int) (comp * paraMin);
        return gera(comp, tam);
    }
}
