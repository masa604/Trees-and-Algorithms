public class BTS{
    protected Node root;
    //Construtor
    public BTS() {
        this.root = null;
    }

    //ADICIONAR NÓS
    public Node add(int key, Node node) {
        Node newNode = new Node(key);

        //se não existir raiz, cria-se
        if (node == null) {
            root = newNode;
            return newNode;
        }

        //atual -> raiz e previous->null
        Node previous = null;
        Node current = node;

        while (current != null) {
            previous = current;

            if (key < current.key) {
                current = current.left;
            } else if (key > current.key) {
                current = current.right;
            } else {
                return current;
            }
        }

        if (key < previous.key) {
            previous.left = newNode;
        } else if (key > previous.key) {
            previous.right = newNode;
        }
        return newNode;
    }

    
    //TRAVESSIA INORDER
    //Imprime a árvore com o método da travessia in Order
    void InOrder(Node root) {
         if(root == null) {
             System.out.println("\nNo nodes in the tree");
             return;
         }
         //imprime o LChild, o nó e depois o RChild
         if(root.left != null)
             InOrder(root.left);
         System.out.print(root.key + " ");
         if(root.right != null)
             InOrder(root.right);
    }
    


    //FIND
    //procura de acordo com as regras da árvore binária de pesquisa
    public Node find(Node node, int key) {
        while (node != null) {
            if (key == node.key) {
                return node;
            } else if (key < node.key) {
                node = node.left;
            } else {
                node = node.right;
            }
        }
        return null;
    }
}
