import java.util.Random;
public class BT{
    protected Node root;
    //Construtor
    public BT() {
        this.root = null;
    }

    //ADICIONAR NÓS
    Random rd = new Random();
    
    public void add(int key, Node atual) {
        //se a raiz não existir, é criada
        if (atual == null){
            this.root = new Node(key);

        //caso contrário, adiciona com um boolean que define o lado de inserção
        } else {
            boolean addRight = rd.nextBoolean();

            if (addRight && atual.right == null) {
                atual.right = new Node(key);
                return atual.right;
            } else if (!addRight && atual.left == null) {
                atual.left = new Node(key);
                return atual.left;
            } else {
                // Se não for possível adicionar à direita ou à esquerda, chama recursivamente
                if (addRight) {
                    return add(key, atual.right);
                } else {
                    return add(key, atual.left);
                }
            }
        }
    }

    //TRAVESSIA INORDER
    //Imprime a árvore com o método da travessia in Order
    void InOrder(Node root) {
         if(root == null) {
             System.out.println("\nNo nodes in the tree");
             return;
         }
         //imprime o LChild, o nó e depois o RChild
         if(root.left != null)
             InOrder(root.left);
         System.out.print(root.key + " ");
         if(root.right != null)
             InOrder(root.right);
    }



    //FIND
    public Node find(Node node, int key) {
        if (node == null) {
            return null;
        }
        if(node.key == key) {
            return node;
        }
        //começa por procurar no lado esquerdo
        Node foundNode = find(node.left, key);
        //caso não esteja no lado esquerdo, procura-se no lado direito
        if(foundNode == null) {
            foundNode = find(node.right, key);
        }
        return foundNode;
    }
}
